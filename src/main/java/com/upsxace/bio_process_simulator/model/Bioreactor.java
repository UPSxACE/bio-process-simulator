package com.upsxace.bio_process_simulator.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.upsxace.bio_process_simulator.infrastructure.orm.annotation.Entity;
import com.upsxace.bio_process_simulator.infrastructure.orm.annotation.Id;
import com.upsxace.bio_process_simulator.model.enums.BioreactorStatus;
import lombok.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity(name = "bioreactor")
@Builder
@Getter
@Setter
@AllArgsConstructor
public class Bioreactor {
    @Id
    private UUID id;
    private BioreactorStatus status;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String reason;
    private String cellType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime lastSampleTime;
    @JsonIgnore
    private Float ph;
    @JsonIgnore
    private Float temperature;
    @JsonIgnore
    private Float dissolvedOxygen;
    @JsonIgnore
    private Float glucose;
    @JsonIgnore
    private Float lactate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Float productTiter;

    public Bioreactor(String cellType) {
        this.status = BioreactorStatus.ENDED;
        this.cellType = cellType;
    }

    public void simulateSecond() {
        // ===== generated by ChatGPT =====

        // seconds → hours
        final float dtH = 1f / 3600f;

        // ===== Tunable constants (kept from your tuned version) =====
        // Substrates / byproducts
        final float GLUCOSE_CONSUMP_PER_H = 0.01f;  // ≈2 g/L over 200h
        final float LACTATE_PROD_PER_H    = 0.01f;

        // pH dynamics
        final float PH_ACID_PER_LAC_PER_H = 0.005f;
        final float PH_NEUTRAL_PULL_H     = 0.02f;

        // Product formation
        final float K_OPT_G_PER_L_H       = 0.0075f; // optimal
        final float K_SUB_G_PER_L_H       = 0.0030f; // suboptimal

        // ===== Glucose decreases (consumption) =====
        float glucoseConsumed = GLUCOSE_CONSUMP_PER_H * dtH;
        glucose = Math.max(0f, glucose - glucoseConsumed);

        // ===== Lactate increases (byproduct) =====
        float lactateProduced = LACTATE_PROD_PER_H * dtH;
        lactate += lactateProduced;

        // ===== pH: acidification from lactate + pull to 7.0, bounded =====
        float acidEffect  = PH_ACID_PER_LAC_PER_H * lactate * dtH;   // pushes pH down
        float neutralPull = PH_NEUTRAL_PULL_H * (7.0f - ph) * dtH;   // pulls toward 7.0
        ph += neutralPull - acidEffect;
        if (ph < 5.0f)  ph = 5.0f;
        if (ph > 8.5f)  ph = 8.5f;

        // ===== DO: wider wander — damped random walk + weaker spring to 50%, bounded 0..100 =====
        float distanceFrom50 = Math.abs(dissolvedOxygen - 50f);                 // 0..50
        // Gentler damping: never below 0.4, so it can still move near extremes
        float factor = 0.4f + 0.6f * (1f - (distanceFrom50 / 50f));             // 1 at 50, 0.4 at 0/100

        // Bigger per-second jitter (lets DO roam more widely)
        float baseDrift = (float)(Math.random() * 0.30f - 0.15f);               // -0.15 .. +0.15 %/sec
        float randomDrift = baseDrift * factor;

        // Occasional gust to kick it farther (2% chance each second)
        if (Math.random() < 0.02) {
            float gust = (float)(Math.random() * 1.2f - 0.6f);                  // -0.6 .. +0.6 % this second
            randomDrift += gust * factor;
        }

        // Weaker spring back toward 50% (so it doesn’t snap back too quickly)
        float spring = 0.1f * (50f - dissolvedOxygen) * dtH;                    // %/h per % deviation

        dissolvedOxygen += randomDrift + spring;
        if (dissolvedOxygen < 0f)   dissolvedOxygen = 0f;
        if (dissolvedOxygen > 100f) dissolvedOxygen = 100f;

        // ===== Temperature: drift to 37 °C (no clamp) =====
        float tempPull = 0.05f * (37.0f - temperature) * dtH;
        temperature += tempPull;

        // ===== Product: faster if enough glucose & pH in range =====
        boolean goodPH      = (ph >= 6.8f && ph <= 7.2f);
        boolean enoughSugar = (glucose > 0.5f);

        productTiter += (enoughSugar && goodPH ? K_OPT_G_PER_L_H : K_SUB_G_PER_L_H) * dtH;
    }
}
